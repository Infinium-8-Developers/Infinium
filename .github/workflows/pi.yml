name: Build Boost for ARM

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04  # Usamos Ubuntu como base para el trabajo
    env:
        LABEL: armv7
    steps:
      - name: Check out repository
        uses: actions/checkout@v3  # Para obtener el cÃ³digo fuente del repositorio

      - name: Set up cross-compilation toolchain
        run: |
          sudo apt-get install aptitude
          sudo aptitude search zlib1g-dev
          sudo apt update
          sudo apt install -y build-essential g++-arm-linux-gnueabihf gcc-arm-linux-gnueabihf wget tar curl build-essential python3-dev autotools-dev libicu-dev libbz2-dev cmake git screen checkinstall

      - name: Download and extract Boost
        run: |
          wget https://boostorg.jfrog.io/artifactory/main/release/1.81.0/source/boost_1_81_0.tar.gz
          tar -xzf boost_1_81_0.tar.gz

      - name: Create user-config.jam for cross-compilation
        run: |
          echo "using gcc : arm : /usr/bin/arm-linux-gnueabihf-gcc : /usr/bin/arm-linux-gnueabihf-g++ ;" > boost_1_81_0/user-config.jam
          cat boost_1_81_0/user-config.jam  

      - name: Set environment variables for cross-compilation
        run: |
          export CC=/usr/bin/arm-linux-gnueabihf-gcc
          export CXX=/usr/bin/arm-linux-gnueabihf-g++

      - name: Build Boost
        run: |
          cd boost_1_81_0
          rm -rf boost_1_81_0/tools/build/*
          ./bootstrap.sh --with-libraries=system,filesystem,thread,date_time,chrono,regex,serialization,atomic,program_options,locale,timer,log
          ./b2 toolset=gcc-arm --user-config=user-config.jam --prefix=/home/runner/work/Infinium/Infinium/boost

      # Install OpenSSL
      - name: Install OpenSSL
        run: |
          wget https://ftp.osuosl.org/pub/libpng/src/zlib/zlib-1.2.11.tar.gz
          tar -xvzf zlib-1.2.11.tar.gz
          cd zlib-1.2.11
          CC=arm-linux-gnueabihf-gcc ./configure --prefix=/usr/arm-linux-gnueabihf
          make
          sudo make install

          curl -OL https://www.openssl.org/source/openssl-1.1.1n.tar.gz
          tar xaf openssl-1.1.1n.tar.gz 
          cd openssl-1.1.1n/
          ./Configure no-asm linux-armv4 --cross-compile-prefix=arm-linux-gnueabihf- --prefix=/home/runner/work/Infinium/Infinium/openssl --openssldir=/home/runner/work/Infinium/Infinium/openssl shared zlib
          make
          make install

      - name: Dep
        run: |
          wget https://github.com/unicode-org/icu/releases/download/release-73-2/icu4c-73_2-src.tgz
          tar -xvzf icu4c-73_2-src.tgz
          cd icu/source
          ./configure --prefix=/tmp/icu-host --enable-static --enable-shared
          make
          make install
          make clean
          
          ./configure --host=arm-linux-gnueabihf --with-cross-build=/tmp/icu-host --prefix=/usr/arm-linux-gnueabihf --enable-shared --enable-static
          make
          make install

      # Install 
      - name: Build
        run: |
          mkdir build && cd build
          cmake -DCMAKE_C_COMPILER=arm-linux-gnueabihf-gcc -DCMAKE_CXX_COMPILER=arm-linux-gnueabihf-g++  -D OPENSSL_ROOT_DIR=/home/runner/work/Infinium/Infinium/openssl -D BUILD_GUI=OFF -D STATIC=ON -D CMAKE_BUILD_TYPE=Release -D BUILD_TESTS=OFF -D BOOST_ROOT=/home/runner/work/Infinium/Infinium/boost_1_81_0 -DCMAKE_C_FLAGS="-mcpu=cortex-a7 -mfpu=neon-vfpv4" -DCMAKE_CXX_FLAGS="-mcpu=cortex-a7 -mfpu=neon-vfpv4 -flto" -D Boost_LIBRARY_DIRS=/home/runner/work/Infinium/Infinium/boost_1_81_0/stage/lib -DCMAKE_EXE_LINKER_FLAGS="-Wl,--allow-multiple-definition" ..
          make

      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src
          TARGETS="infiniumd connectivity_tool simplewallet"
          rm -rf Infinium-${TAG}
          mkdir Infinium-${TAG}
          cp ${TARGETS} Infinium-${TAG}/
          tar cvfz Infinium-${TAG}-${LABEL}.tar.gz Infinium-${TAG}/
      
      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/Infinium-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_name: Infinium-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_content_type: application/gzip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Infinium-${{ github.sha }}-${{ env.LABEL }}
          path: ./build/src/Infinium-${{ github.sha }}  
